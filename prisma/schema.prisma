datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider   = "prisma-client-js"
  engineType = "binary" // https://github.com/prisma/prisma/issues/10649#issuecomment-1445170405
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/lib/generated/zod"
}

model Band {
  id         Int         @id @default(autoincrement())
  /// @zod.string.min(1, { message: "Pas de nom, pas de fanfare." }).max(32)
  name       String      @unique
  players    Player[]
  gigs       Gig[]
  voices     Voice[]
  adminRoles AdminRole[]
}

model Player {
  id             Int             @id @default(autoincrement())
  /// @zod.string.min(1, { message: "J'ai pas compris." }).max(32)
  name           String
  presences      Presence[]
  roles          Role[]
  bands          Band[]
  organizerRoles OrganizerRole[]
  adminRoles     AdminRole[]
}

model Gig {
  id             Int             @id @default(autoincrement())
  /// @zod.string.min(1, { message: "C\'est vide :(" }).max(32)
  name           String
  presences      Presence[]
  band           Band            @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId         Int
  /// @zod.date.min(new Date(), { message: "Un peu trop tard !"})
  date           DateTime
  /// @zod.string.min(1, { message: "Dans ton c** ?" }).max(60)
  location       String
  description    String?
  playable       Boolean         @default(false)
  organizerRoles OrganizerRole[]
}

model Presence {
  id       Int     @id @default(autoincrement())
  value    Boolean @default(false)
  gig      Gig     @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId    Int
  player   Player  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int

  @@unique([gigId, playerId])
}

model Role {
  id           Int        @id @default(autoincrement())
  playable     Boolean    @default(false)
  instrument   Instrument @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  instrumentId Int
  player       Player     @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId     Int

  @@unique([instrumentId, playerId])
}

model Instrument {
  id     Int     @id @default(autoincrement())
  /// @zod.string.min(1, { message: "Ce truc Ã  bien un nom ?" }).max(32)
  name   String  @unique
  roles  Role[]
  voices Voice[]
}

model Voice {
  id           Int        @id @default(autoincrement())
  instrument   Instrument @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  instrumentId Int
  band         Band       @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId       Int
}

model OrganizerRole {
  id       Int    @id @default(autoincrement())
  gig      Gig    @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId    Int
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int

  @@unique([gigId, playerId])
}

model AdminRole {
  id       Int    @id @default(autoincrement())
  band     Band   @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId   Int
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int

  @@unique([bandId, playerId])
}
