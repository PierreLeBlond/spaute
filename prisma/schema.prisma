datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider   = "prisma-client-js"
  engineType = "binary" // https://github.com/prisma/prisma/issues/10649#issuecomment-1445170405
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/lib/generated/zod"
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthUser {
  id             String        @id @unique
  auth_session   AuthSession[]
  auth_key       AuthKey[]
  email          String        @unique
  email_verified Boolean       @default(false)

  player Player?

  @@map("auth_user")
}

model Band {
  id          String       @id @default(uuid())
  name        String       @unique
  gigs        Gig[]
  bandVoices  BandVoice[]
  memberships Membership[]
}

model Player {
  id     String   @id @default(uuid())
  user   AuthUser @relation(fields: [userId], references: [id])
  userId String   @unique

  name        String       @unique
  presences   Presence[]
  roles       Role[]
  memberships Membership[]
}

model Membership {
  id       String  @id @default(uuid())
  isAdmin  Boolean @default(false)
  band     Band    @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId   String
  player   Player  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId String

  @@unique([bandId, playerId])
}

model Gig {
  id               String          @id @default(uuid())
  name             String
  presences        Presence[]
  band             Band?           @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId           String?
  gigVoices        GigVoice[]
  disabledVoices   DisabledVoice[]
  date             DateTime
  location         String
  description      String?
  playable         Boolean         @default(false)
  formations       Formation[]     @relation("Formations")
  currentFormation Formation?      @relation("CurrentFormation")
}

model Presence {
  id          String  @id @default(uuid())
  value       Boolean @default(false)
  isOrganizer Boolean @default(false)
  gig         Gig     @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId       String
  player      Player  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId    String

  formationVoicePresences         FormationVoicePresence[]
  formationUndefinedVoicePresence FormationUndefinedVoicePresence[]

  @@unique([gigId, playerId])
}

model Role {
  id           String     @id @default(uuid())
  playable     Boolean    @default(false)
  instrument   Instrument @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  instrumentId String
  player       Player     @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId     String

  @@unique([instrumentId, playerId])
}

model Instrument {
  id              String           @id @default(uuid())
  name            String           @unique
  roles           Role[]
  bandVoices      BandVoice[]
  gigVoices       GigVoice[]
  formationVoices FormationVoice[]
}

model GigVoice {
  id           String     @id @default(uuid())
  instrument   Instrument @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  instrumentId String
  gig          Gig        @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId        String

  @@unique([id, gigId])
}

model BandVoice {
  id             String          @id @default(uuid())
  instrument     Instrument      @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  instrumentId   String
  band           Band            @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId         String
  disabledVoices DisabledVoice[]

  @@unique([id, bandId])
}

model DisabledVoice {
  id          String    @id @default(uuid())
  gig         Gig       @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId       String
  bandVoice   BandVoice @relation(fields: [bandVoiceId], references: [id], onDelete: Cascade)
  bandVoiceId String

  @@unique([gigId, bandVoiceId])
}

model FormationVoice {
  id          String    @id @default(uuid())
  formation   Formation @relation(fields: [formationId], references: [id], onDelete: Cascade)
  formationId String

  instrument   Instrument @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  instrumentId String

  formationVoicePresences FormationVoicePresence[]

  @@unique([formationId, instrumentId])
}

model FormationUndefinedVoicePresence {
  id          String    @id @default(uuid())
  formation   Formation @relation(fields: [formationId], references: [id], onDelete: Cascade)
  formationId String

  presence   Presence @relation(fields: [presenceId], references: [id], onDelete: Cascade)
  presenceId String
}

model FormationVoicePresence {
  id String @id @default(uuid())

  formationVoice   FormationVoice @relation(fields: [formationVoiceId], references: [id], onDelete: Cascade)
  formationVoiceId String

  presence   Presence @relation(fields: [presenceId], references: [id], onDelete: Cascade)
  presenceId String
}

model Formation {
  id String @id @default(uuid())

  formationVoices                  FormationVoice[]
  formationUndefinedVoicePresences FormationUndefinedVoicePresence[]

  gig   Gig?    @relation("Formations", fields: [gigId], references: [id], onDelete: Cascade)
  gigId String?

  gigCurrentFrom   Gig?    @relation("CurrentFormation", fields: [gigCurrentFromId], references: [id], onDelete: Cascade)
  gigCurrentFromId String? @unique
}
