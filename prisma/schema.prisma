datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  engineType      = "binary" // https://github.com/prisma/prisma/issues/10649#issuecomment-1445170405
  previewFeatures = ["fullTextSearch"]
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/lib/generated/zod"
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthUser {
  id             String        @id @unique
  auth_session   AuthSession[]
  auth_key       AuthKey[]
  email          String        @unique
  email_verified Boolean       @default(false)

  player Player?

  @@map("auth_user")
}

model Band {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  gigs        Gig[]
  bandVoices  BandVoice[]
  memberships Membership[]
}

model Player {
  id     Int      @id @default(autoincrement())
  user   AuthUser @relation(fields: [userId], references: [id])
  userId String   @unique

  name        String       @unique
  presences   Presence[]
  roles       Role[]
  memberShips Membership[]
}

model Membership {
  id       Int     @id @default(autoincrement())
  isAdmin  Boolean @default(false)
  band     Band    @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId   Int
  player   Player  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId Int

  @@unique([bandId, playerId])
}

model Gig {
  id             Int             @id @default(autoincrement())
  name           String
  presences      Presence[]
  band           Band?           @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId         Int?
  gigVoices      GigVoice[]
  disabledVoices DisabledVoice[]
  date           DateTime
  location       String
  description    String?
  playable       Boolean         @default(false)
}

model Presence {
  id          Int     @id @default(autoincrement())
  value       Boolean @default(false)
  isOrganizer Boolean @default(false)
  gig         Gig     @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId       Int
  player      Player  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId    Int

  @@unique([gigId, playerId])
}

model Role {
  id           Int        @id @default(autoincrement())
  playable     Boolean    @default(false)
  instrument   Instrument @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  instrumentId Int
  player       Player     @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId     Int

  @@unique([instrumentId, playerId])
}

model Instrument {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  roles      Role[]
  bandVoices BandVoice[]
  gigVoices  GigVoice[]
}

model GigVoice {
  id           Int        @id @default(autoincrement())
  instrument   Instrument @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  instrumentId Int
  gig          Gig        @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId        Int

  @@unique([id, gigId])
}

model BandVoice {
  id             Int             @id @default(autoincrement())
  instrument     Instrument      @relation(fields: [instrumentId], references: [id], onDelete: Cascade)
  instrumentId   Int
  band           Band            @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId         Int
  disabledVoices DisabledVoice[]

  @@unique([id, bandId])
}

model DisabledVoice {
  id          Int       @id @default(autoincrement())
  gig         Gig       @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId       Int
  bandVoice   BandVoice @relation(fields: [bandVoiceId], references: [id], onDelete: Cascade)
  bandVoiceId Int

  @@unique([gigId, bandVoiceId])
}
